/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { ErrorRes } from "../models";
// @ts-ignore
import { OperationResponse } from "../models";
// @ts-ignore
import { ReactionReqBody } from "../models";
/**
 * ReactionApi - axios parameter creator
 * @export
 */
export const ReactionApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Delete a reaction (like or recast) to a given cast \\ (In order to delete a reaction `signer_uuid` must be approved)
     * @summary Delete a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReaction: async (
      apiKey: string,
      reactionReqBody: ReactionReqBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'apiKey' is not null or undefined
      assertParamExists("deleteReaction", "apiKey", apiKey);
      // verify required parameter 'reactionReqBody' is not null or undefined
      assertParamExists("deleteReaction", "reactionReqBody", reactionReqBody);
      const localVarPath = `/farcaster/reaction`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (apiKey != null) {
        localVarHeaderParameter["api_key"] = String(apiKey);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reactionReqBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
     * @summary Posts a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postReaction: async (
      apiKey: string,
      reactionReqBody: ReactionReqBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'apiKey' is not null or undefined
      assertParamExists("postReaction", "apiKey", apiKey);
      // verify required parameter 'reactionReqBody' is not null or undefined
      assertParamExists("postReaction", "reactionReqBody", reactionReqBody);
      const localVarPath = `/farcaster/reaction`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (apiKey != null) {
        localVarHeaderParameter["api_key"] = String(apiKey);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reactionReqBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ReactionApi - functional programming interface
 * @export
 */
export const ReactionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ReactionApiAxiosParamCreator(configuration);
  return {
    /**
     * Delete a reaction (like or recast) to a given cast \\ (In order to delete a reaction `signer_uuid` must be approved)
     * @summary Delete a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteReaction(
      apiKey: string,
      reactionReqBody: ReactionReqBody,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OperationResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReaction(
        apiKey,
        reactionReqBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
     * @summary Posts a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postReaction(
      apiKey: string,
      reactionReqBody: ReactionReqBody,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OperationResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postReaction(
        apiKey,
        reactionReqBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ReactionApi - factory interface
 * @export
 */
export const ReactionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ReactionApiFp(configuration);
  return {
    /**
     * Delete a reaction (like or recast) to a given cast \\ (In order to delete a reaction `signer_uuid` must be approved)
     * @summary Delete a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReaction(
      apiKey: string,
      reactionReqBody: ReactionReqBody,
      options?: any
    ): AxiosPromise<OperationResponse> {
      return localVarFp
        .deleteReaction(apiKey, reactionReqBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
     * @summary Posts a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postReaction(
      apiKey: string,
      reactionReqBody: ReactionReqBody,
      options?: any
    ): AxiosPromise<OperationResponse> {
      return localVarFp
        .postReaction(apiKey, reactionReqBody, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ReactionApi - object-oriented interface
 * @export
 * @class ReactionApi
 * @extends {BaseAPI}
 */
export class ReactionApi extends BaseAPI {
  /**
   * Delete a reaction (like or recast) to a given cast \\ (In order to delete a reaction `signer_uuid` must be approved)
   * @summary Delete a reaction
   * @param {string} apiKey API key required for authentication.
   * @param {ReactionReqBody} reactionReqBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReactionApi
   */
  public deleteReaction(
    apiKey: string,
    reactionReqBody: ReactionReqBody,
    options?: AxiosRequestConfig
  ) {
    return ReactionApiFp(this.configuration)
      .deleteReaction(apiKey, reactionReqBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
   * @summary Posts a reaction
   * @param {string} apiKey API key required for authentication.
   * @param {ReactionReqBody} reactionReqBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReactionApi
   */
  public postReaction(
    apiKey: string,
    reactionReqBody: ReactionReqBody,
    options?: AxiosRequestConfig
  ) {
    return ReactionApiFp(this.configuration)
      .postReaction(apiKey, reactionReqBody, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
