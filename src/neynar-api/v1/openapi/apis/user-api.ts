/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustodyAddressResponse } from '../models';
// @ts-ignore
import { ErrorRes } from '../models';
// @ts-ignore
import { RecentUsersResponse } from '../models';
// @ts-ignore
import { User200Response } from '../models';
// @ts-ignore
import { UserCastLikeResponse } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the custody address for a given FID
         * @summary Get the custody address for a given FID
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custodyAddress: async (apiKey: string, fid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('custodyAddress', 'apiKey', apiKey)
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('custodyAddress', 'fid', fid)
            const localVarPath = `/farcaster/custody-address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of casts from the protocol in reverse chronological order based on timestamp
         * @summary Get Recent Users
         * @param {string} apiKey API key required for authentication.
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of results to retrieve (default 100, max 1000)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentUsers: async (apiKey: string, viewerFid?: number, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('recentUsers', 'apiKey', apiKey)
            const localVarPath = `/farcaster/recent-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns metadata about a specific user
         * @summary Get User Information by FID
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of a user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user: async (apiKey: string, fid: number, viewerFid?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('user', 'apiKey', apiKey)
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('user', 'fid', fid)
            const localVarPath = `/farcaster/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns metadata about a specific user
         * @summary Get User Information by username
         * @param {string} apiKey API key required for authentication.
         * @param {string} username Username of the user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userByUsername: async (apiKey: string, username: string, viewerFid?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('userByUsername', 'apiKey', apiKey)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('userByUsername', 'username', username)
            const localVarPath = `/farcaster/user-by-username`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all the liked cast of a User
         * @summary Get User Cast Likes
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid FID of the user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to retrieve (default 25, max 150)
         * @param {string} [cursor] Pagination cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCastLikes: async (apiKey: string, fid: number, viewerFid?: number, limit?: number, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('userCastLikes', 'apiKey', apiKey)
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('userCastLikes', 'fid', fid)
            const localVarPath = `/farcaster/user-cast-likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the custody address for a given FID
         * @summary Get the custody address for a given FID
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async custodyAddress(apiKey: string, fid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.custodyAddress(apiKey, fid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of casts from the protocol in reverse chronological order based on timestamp
         * @summary Get Recent Users
         * @param {string} apiKey API key required for authentication.
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of results to retrieve (default 100, max 1000)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recentUsers(apiKey: string, viewerFid?: number, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecentUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recentUsers(apiKey, viewerFid, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns metadata about a specific user
         * @summary Get User Information by FID
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of a user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async user(apiKey: string, fid: number, viewerFid?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.user(apiKey, fid, viewerFid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns metadata about a specific user
         * @summary Get User Information by username
         * @param {string} apiKey API key required for authentication.
         * @param {string} username Username of the user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userByUsername(apiKey: string, username: string, viewerFid?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userByUsername(apiKey, username, viewerFid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch all the liked cast of a User
         * @summary Get User Cast Likes
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid FID of the user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to retrieve (default 25, max 150)
         * @param {string} [cursor] Pagination cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCastLikes(apiKey: string, fid: number, viewerFid?: number, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCastLikeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCastLikes(apiKey, fid, viewerFid, limit, cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Returns the custody address for a given FID
         * @summary Get the custody address for a given FID
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custodyAddress(apiKey: string, fid: number, options?: any): AxiosPromise<CustodyAddressResponse> {
            return localVarFp.custodyAddress(apiKey, fid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of casts from the protocol in reverse chronological order based on timestamp
         * @summary Get Recent Users
         * @param {string} apiKey API key required for authentication.
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of results to retrieve (default 100, max 1000)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentUsers(apiKey: string, viewerFid?: number, cursor?: string, limit?: number, options?: any): AxiosPromise<RecentUsersResponse> {
            return localVarFp.recentUsers(apiKey, viewerFid, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns metadata about a specific user
         * @summary Get User Information by FID
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of a user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user(apiKey: string, fid: number, viewerFid?: number, options?: any): AxiosPromise<User200Response> {
            return localVarFp.user(apiKey, fid, viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns metadata about a specific user
         * @summary Get User Information by username
         * @param {string} apiKey API key required for authentication.
         * @param {string} username Username of the user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userByUsername(apiKey: string, username: string, viewerFid?: number, options?: any): AxiosPromise<User200Response> {
            return localVarFp.userByUsername(apiKey, username, viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all the liked cast of a User
         * @summary Get User Cast Likes
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid FID of the user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to retrieve (default 25, max 150)
         * @param {string} [cursor] Pagination cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCastLikes(apiKey: string, fid: number, viewerFid?: number, limit?: number, cursor?: string, options?: any): AxiosPromise<UserCastLikeResponse> {
            return localVarFp.userCastLikes(apiKey, fid, viewerFid, limit, cursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Returns the custody address for a given FID
     * @summary Get the custody address for a given FID
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public custodyAddress(apiKey: string, fid: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).custodyAddress(apiKey, fid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of casts from the protocol in reverse chronological order based on timestamp
     * @summary Get Recent Users
     * @param {string} apiKey API key required for authentication.
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of results to retrieve (default 100, max 1000)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public recentUsers(apiKey: string, viewerFid?: number, cursor?: string, limit?: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).recentUsers(apiKey, viewerFid, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns metadata about a specific user
     * @summary Get User Information by FID
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of a user
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public user(apiKey: string, fid: number, viewerFid?: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).user(apiKey, fid, viewerFid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns metadata about a specific user
     * @summary Get User Information by username
     * @param {string} apiKey API key required for authentication.
     * @param {string} username Username of the user
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userByUsername(apiKey: string, username: string, viewerFid?: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userByUsername(apiKey, username, viewerFid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch all the liked cast of a User
     * @summary Get User Cast Likes
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {number} [limit] Number of results to retrieve (default 25, max 150)
     * @param {string} [cursor] Pagination cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userCastLikes(apiKey: string, fid: number, viewerFid?: number, limit?: number, cursor?: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userCastLikes(apiKey, fid, viewerFid, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
}

