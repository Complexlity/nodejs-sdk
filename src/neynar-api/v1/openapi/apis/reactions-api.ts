/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { CastLikesResponse } from "../models";
// @ts-ignore
import { CastReactionsResponse } from "../models";
// @ts-ignore
import { CastRecasterResponse } from "../models";
// @ts-ignore
import { ErrorRes } from "../models";
/**
 * ReactionsApi - axios parameter creator
 * @export
 */
export const ReactionsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get all like reactions for a specific cast in reverse chronological order.
     * @summary Get all like reactions for a specific cast
     * @param {string} castHash Cast hash
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of results to retrieve (default 25, max 150)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    castLikes: async (
      castHash: string,
      viewerFid?: number,
      cursor?: string,
      limit?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'castHash' is not null or undefined
      assertParamExists("castLikes", "castHash", castHash);
      const localVarPath = `/farcaster/cast-likes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "api_key",
        configuration
      );

      if (castHash !== undefined) {
        localVarQueryParameter["castHash"] = castHash;
      }

      if (viewerFid !== undefined) {
        localVarQueryParameter["viewerFid"] = viewerFid;
      }

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get all reactions (likes and recasts) for a specific cast.
     * @summary Get all reactions for a specific cast
     * @param {string} castHash Cast hash
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of results to retrieve (default 25, max 150)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    castReactions: async (
      castHash: string,
      viewerFid?: number,
      cursor?: string,
      limit?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'castHash' is not null or undefined
      assertParamExists("castReactions", "castHash", castHash);
      const localVarPath = `/farcaster/cast-reactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "api_key",
        configuration
      );

      if (castHash !== undefined) {
        localVarQueryParameter["castHash"] = castHash;
      }

      if (viewerFid !== undefined) {
        localVarQueryParameter["viewerFid"] = viewerFid;
      }

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get all recasters for a specific cast.
     * @summary Get all recasters for a specific cast
     * @param {string} castHash Cast hash
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of results to retrieve (default 25, max 150)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    castRecasters: async (
      castHash: string,
      viewerFid?: number,
      cursor?: string,
      limit?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'castHash' is not null or undefined
      assertParamExists("castRecasters", "castHash", castHash);
      const localVarPath = `/farcaster/cast-recasters`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "api_key",
        configuration
      );

      if (castHash !== undefined) {
        localVarQueryParameter["castHash"] = castHash;
      }

      if (viewerFid !== undefined) {
        localVarQueryParameter["viewerFid"] = viewerFid;
      }

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ReactionsApi - functional programming interface
 * @export
 */
export const ReactionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ReactionsApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all like reactions for a specific cast in reverse chronological order.
     * @summary Get all like reactions for a specific cast
     * @param {string} castHash Cast hash
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of results to retrieve (default 25, max 150)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async castLikes(
      castHash: string,
      viewerFid?: number,
      cursor?: string,
      limit?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CastLikesResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.castLikes(
        castHash,
        viewerFid,
        cursor,
        limit,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get all reactions (likes and recasts) for a specific cast.
     * @summary Get all reactions for a specific cast
     * @param {string} castHash Cast hash
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of results to retrieve (default 25, max 150)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async castReactions(
      castHash: string,
      viewerFid?: number,
      cursor?: string,
      limit?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CastReactionsResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.castReactions(
        castHash,
        viewerFid,
        cursor,
        limit,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get all recasters for a specific cast.
     * @summary Get all recasters for a specific cast
     * @param {string} castHash Cast hash
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of results to retrieve (default 25, max 150)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async castRecasters(
      castHash: string,
      viewerFid?: number,
      cursor?: string,
      limit?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CastRecasterResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.castRecasters(
        castHash,
        viewerFid,
        cursor,
        limit,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ReactionsApi - factory interface
 * @export
 */
export const ReactionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ReactionsApiFp(configuration);
  return {
    /**
     * Get all like reactions for a specific cast in reverse chronological order.
     * @summary Get all like reactions for a specific cast
     * @param {ReactionsApiCastLikesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    castLikes(
      requestParameters: ReactionsApiCastLikesRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<CastLikesResponse> {
      return localVarFp
        .castLikes(
          requestParameters.castHash,
          requestParameters.viewerFid,
          requestParameters.cursor,
          requestParameters.limit,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get all reactions (likes and recasts) for a specific cast.
     * @summary Get all reactions for a specific cast
     * @param {ReactionsApiCastReactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    castReactions(
      requestParameters: ReactionsApiCastReactionsRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<CastReactionsResponse> {
      return localVarFp
        .castReactions(
          requestParameters.castHash,
          requestParameters.viewerFid,
          requestParameters.cursor,
          requestParameters.limit,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get all recasters for a specific cast.
     * @summary Get all recasters for a specific cast
     * @param {ReactionsApiCastRecastersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    castRecasters(
      requestParameters: ReactionsApiCastRecastersRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<CastRecasterResponse> {
      return localVarFp
        .castRecasters(
          requestParameters.castHash,
          requestParameters.viewerFid,
          requestParameters.cursor,
          requestParameters.limit,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for castLikes operation in ReactionsApi.
 * @export
 * @interface ReactionsApiCastLikesRequest
 */
export interface ReactionsApiCastLikesRequest {
  /**
   * Cast hash
   * @type {string}
   * @memberof ReactionsApiCastLikes
   */
  readonly castHash: string;

  /**
   * fid of the user viewing this information, needed for contextual information.
   * @type {number}
   * @memberof ReactionsApiCastLikes
   */
  readonly viewerFid?: number;

  /**
   * Pagination cursor.
   * @type {string}
   * @memberof ReactionsApiCastLikes
   */
  readonly cursor?: string;

  /**
   * Number of results to retrieve (default 25, max 150)
   * @type {number}
   * @memberof ReactionsApiCastLikes
   */
  readonly limit?: number;
}

/**
 * Request parameters for castReactions operation in ReactionsApi.
 * @export
 * @interface ReactionsApiCastReactionsRequest
 */
export interface ReactionsApiCastReactionsRequest {
  /**
   * Cast hash
   * @type {string}
   * @memberof ReactionsApiCastReactions
   */
  readonly castHash: string;

  /**
   * fid of the user viewing this information, needed for contextual information.
   * @type {number}
   * @memberof ReactionsApiCastReactions
   */
  readonly viewerFid?: number;

  /**
   * Pagination cursor.
   * @type {string}
   * @memberof ReactionsApiCastReactions
   */
  readonly cursor?: string;

  /**
   * Number of results to retrieve (default 25, max 150)
   * @type {number}
   * @memberof ReactionsApiCastReactions
   */
  readonly limit?: number;
}

/**
 * Request parameters for castRecasters operation in ReactionsApi.
 * @export
 * @interface ReactionsApiCastRecastersRequest
 */
export interface ReactionsApiCastRecastersRequest {
  /**
   * Cast hash
   * @type {string}
   * @memberof ReactionsApiCastRecasters
   */
  readonly castHash: string;

  /**
   * fid of the user viewing this information, needed for contextual information.
   * @type {number}
   * @memberof ReactionsApiCastRecasters
   */
  readonly viewerFid?: number;

  /**
   * Pagination cursor.
   * @type {string}
   * @memberof ReactionsApiCastRecasters
   */
  readonly cursor?: string;

  /**
   * Number of results to retrieve (default 25, max 150)
   * @type {number}
   * @memberof ReactionsApiCastRecasters
   */
  readonly limit?: number;
}

/**
 * ReactionsApi - object-oriented interface
 * @export
 * @class ReactionsApi
 * @extends {BaseAPI}
 */
export class ReactionsApi extends BaseAPI {
  /**
   * Get all like reactions for a specific cast in reverse chronological order.
   * @summary Get all like reactions for a specific cast
   * @param {ReactionsApiCastLikesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReactionsApi
   */
  public castLikes(
    requestParameters: ReactionsApiCastLikesRequest,
    options?: AxiosRequestConfig
  ) {
    return ReactionsApiFp(this.configuration)
      .castLikes(
        requestParameters.castHash,
        requestParameters.viewerFid,
        requestParameters.cursor,
        requestParameters.limit,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get all reactions (likes and recasts) for a specific cast.
   * @summary Get all reactions for a specific cast
   * @param {ReactionsApiCastReactionsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReactionsApi
   */
  public castReactions(
    requestParameters: ReactionsApiCastReactionsRequest,
    options?: AxiosRequestConfig
  ) {
    return ReactionsApiFp(this.configuration)
      .castReactions(
        requestParameters.castHash,
        requestParameters.viewerFid,
        requestParameters.cursor,
        requestParameters.limit,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get all recasters for a specific cast.
   * @summary Get all recasters for a specific cast
   * @param {ReactionsApiCastRecastersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReactionsApi
   */
  public castRecasters(
    requestParameters: ReactionsApiCastRecastersRequest,
    options?: AxiosRequestConfig
  ) {
    return ReactionsApiFp(this.configuration)
      .castRecasters(
        requestParameters.castHash,
        requestParameters.viewerFid,
        requestParameters.cursor,
        requestParameters.limit,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
