/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorRes } from '../models';
// @ts-ignore
import { FrameActionReqBody } from '../models';
// @ts-ignore
import { FrameActionResponse } from '../models';
/**
 * FrameApi - axios parameter creator
 * @export
 */
export const FrameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Post a frame action \\ (In order to post a frame action `signer_uuid` must be approved) 
         * @summary Posts a frame action
         * @param {string} apiKey API key required for authentication.
         * @param {FrameActionReqBody} frameActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrameAction: async (apiKey: string, frameActionReqBody: FrameActionReqBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('postFrameAction', 'apiKey', apiKey)
            // verify required parameter 'frameActionReqBody' is not null or undefined
            assertParamExists('postFrameAction', 'frameActionReqBody', frameActionReqBody)
            const localVarPath = `/farcaster/frame/action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(frameActionReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FrameApi - functional programming interface
 * @export
 */
export const FrameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FrameApiAxiosParamCreator(configuration)
    return {
        /**
         * Post a frame action \\ (In order to post a frame action `signer_uuid` must be approved) 
         * @summary Posts a frame action
         * @param {string} apiKey API key required for authentication.
         * @param {FrameActionReqBody} frameActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFrameAction(apiKey: string, frameActionReqBody: FrameActionReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrameAction(apiKey, frameActionReqBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FrameApi - factory interface
 * @export
 */
export const FrameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FrameApiFp(configuration)
    return {
        /**
         * Post a frame action \\ (In order to post a frame action `signer_uuid` must be approved) 
         * @summary Posts a frame action
         * @param {string} apiKey API key required for authentication.
         * @param {FrameActionReqBody} frameActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrameAction(apiKey: string, frameActionReqBody: FrameActionReqBody, options?: any): AxiosPromise<FrameActionResponse> {
            return localVarFp.postFrameAction(apiKey, frameActionReqBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FrameApi - object-oriented interface
 * @export
 * @class FrameApi
 * @extends {BaseAPI}
 */
export class FrameApi extends BaseAPI {
    /**
     * Post a frame action \\ (In order to post a frame action `signer_uuid` must be approved) 
     * @summary Posts a frame action
     * @param {string} apiKey API key required for authentication.
     * @param {FrameActionReqBody} frameActionReqBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public postFrameAction(apiKey: string, frameActionReqBody: FrameActionReqBody, options?: AxiosRequestConfig) {
        return FrameApiFp(this.configuration).postFrameAction(apiKey, frameActionReqBody, options).then((request) => request(this.axios, this.basePath));
    }
}
